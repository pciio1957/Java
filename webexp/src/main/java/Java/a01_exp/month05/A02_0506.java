package Java.a01_exp.month05;

public class A02_0506 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	/*
	
0506 

복습문제 
1. 개발환경을 설정할수있는가? java 프로그램을 설정하는 순서를 기술해보기
필요한 JDK 다운로드
- c드라이브에 javaexp 폴더 생성 외 생략
- dynamic web 프로젝트 생성
- 한글 encoding 확인 : uft-8

2. 지난 시간에 언급한 주요 단축키와 기능 기술
sysout : 컨트롤+ 스페이스 단축키 system~ 자동완성
-전체주석/부분주석
-실행 
-줄복사(ctrl+space+화살표아래)

3. 주석문의 종류와 역할
// 한줄 주석 /*  범위 주석
실행되는 코딩에 포함되지 않는 메모 용도 
실무: 작성자, 변경일, 입력값/리턴값, 핵심 로직으로 언급될 부분

4. 데이터 선언과 할당 형식을 대표적인 숫자형과 문자열을 나누어서 간단한 예제로 출력하는 예제
int형, string 형으로 예제
데이터유형 변수명 = 할당할데이터;

5. 사칙연산자를 종류와 나머지 연산자를 위에 선언한 변수기준으로 기능 기술
종류: +, -, *, /, %
int로 데이터 할당이 되었을 경우 num01 +num02와 같이 단순 사칙연산 가능 
% : 두수를 나눈 후 나머지값을 처리할 때 필요하다
-> 이 외에는 삼항, 대입, 증감, 논리연산자(비교언산자+비교연산자)가 있다.

6. 비교연산자의 종류와 내용 기술
결과값을 boolean값으로 true/false값을 가져온다
주로 조건문이나 반복문에 활용된다 
>=, <=, ==, !=, >, <
!= 값이 다를 때 true값 반환

7. 조건문의 기본형식 기술, 변수 age와 비교연산자를 이용해 20세 이상에 따라 성인/미성년 구분하는 코드
if(조건1){}
if(조건1){}else {} 
if(조건1){}else if{} else{}
switch() { case: break; defalut; }

8. 반복문 중 for문의 기본형식 기술, 홀수로 20까지 출력
for(초기값; 반복조건; 증감연산자) { 반복할구문 }

9. 자바에서 기본변수와 객체의 메모리 사용 중 stack/heap 기술
객체는 heap영역에 객체를 생성하고 stack영역에 객체의 주소값을 저장한다.
primitive 데이터는 stack영역에 바로 데이터를 할당한다.
heap의 객체는 대문자로 시작하여 선언한다. 
	ex) Person p01 = new Person();
	Person : 객체는 대문자로 시작하여 선언한다.
	참조변수는 소문자로 시작한다
stack은 소문자로도 선언하고 할당하여 처리한다.
	ex) int num01 = 25;
	int : 기본데이터유형으로 소문자로 선언
-> 그니까 Person이라는 객체를 참조해서 사용하기 때문에 참조변수명은 소문자로 시작하고, 밑에 stack에서 int는 기본데이터유형으로 소문자로 선언한다.
- 객체지향 프로그램에서는 가독성(효과적으로 읽고 해석하는 성격)을 위해서 
위와 같이 선언한다. 에러 발생은 되지않는다. 

10. 자바의 메소드 기본 형식 기술, 매개변수로 금액 입금시 리턴값으로
2배가 되는 메소드 코드 기술 ((이문제를 풀때 매개변수로 금액입금하는걸 안함))
리턴데이터유형 메소드명(매개변수...) {
프로세스 처리
return 리턴할실제데이터;
}

11. 배열의 기본형식 기술, 좋아하는 음식 배열 선언 후 출력 
((배열로 메모리크기설정만 하는걸 잘 몰랐음))
- 데이터유형[] 참조변수 = new 데이터유형[크기];
- 데이터유형[] 참조변수 = {데이터1, 2, 3};


이번시간 하는것
1. 모듈화란 무엇이고 왜 필요로 할까?
	프로그램의 재활용, 효과적인 메모리 사용을 위해서 사용
	메소드를 통해서 기능을 선언했다가 해당 메소드를 호출하면 그 기능이 수행되게 처리
	여러 개의 메소드, 여러 개의 속성이 모여서 모듈화를 처리하는 것이 클래스/객체이다.
	- 클래스가 여러 개 모여서 처리하는 단위 => 패키지
	- 패키징화해서 처리하는 프로그램이 *.jar 로 끝나는 프로그램이며, 
	  모듈단위로 처리하여 모여서 프레임워크로 사용된다.

2. 자바에서 메소드는 어떤 용도로 활용될까?
	리턴타입 메소드명(입력값) {
		//필요로 하는 프로세스 처리
		retrun 리턴할 데이터;
	}
	모듈화의 첫 단계로 자주 사용되는 기능 코드를 선언하여, 
	메소드명(입력값) 형식으로 호출하는 것을 말한다.
	자바에서 메소드는 클래스의 구성요소로 사용된다.

3. 자바의 코드와 실제 수행되는 영역의 차이점은 어떤 것이 있을까요?
	코드는 class로 선언되어 있는 것을 말하고 
	class에 선언된 코드가 메모리에 로딩되어 수행되는 것을 객체라고 한다.
	class와 객체는 밀접한 연관관계를 가지고 있다. 
	
	class로 만들어진 소스 자체로는 프로그램 처리를 하지 못한다.
	비유로 따지자면 건물의 도면과 같은 역할을 한다.
	건축물이 객체라면 class로는 도면이라고 할 수 있다.
	하나의 도면으로 여러 개의 건축물을 만들 수 있는가 
	> 가능, = 하나의 클래스로 여러 개의 객체를 만들 수 있다
	
	임의의 패키지 안에 클래스 Person을 만든다. 
	// 하나의 클래스로 객체를 위한 도면과 같은 역할
	public class Person { // -> public 의 경우 모두가 접근가능
	// 클래스에서 사용되는 필드(구성요소1) 
	// 클래스의 특정 속성을 나타낸다.
	public String name;
	public int age;
	public String loc;
	// 생성자 : (구성요소2), 클래스에서는 클래스와 동일한 명칭을 가진 기능의 함수 
	public Person() { // ()가 생성자임, 여기에 클래스 생성시 나오는 변수 지정
		//생성자는 일반적으로 속성(필드)를 초기화한다. 
		//그래서 리턴값이 없다. 
		System.out.println("생성자 호출");
	}
		
	// 클래스 내에서 기능을 처리하는 메소드(구성요소3)
	public String call() {
		System.out.println("기능 메소드 호출");
		return "문자열리턴";
	}
	
	main 클래스에서 만든 외부 클래스를 불러오기 위해서 
	Person p02 = new Person(); //Person() 부분을 지칭한다. 
	외부 패키지 클래스 가져오기 : ctrl+shift+o 해줘야 import됨
	
	실습 Person() 클래스를 만들었고
	응용 Product() 클래스로 실습함
	A03_class01에 필기함. 
	
	p01 = 실습하면서 만든거
	p02 = 응용문제
	p03 = 실습 두번째로 만든거 
	
	실습한거 p01, p03의 전역변수에 값지정 
	응용으로 pro01, pro02 만들기
	
	매개변수가 있는 생성자 생성 -> this 사용
	매개변수가 있는 생성자를 이용한 객체 생성 p04 만듬
	
	응용으로 pro03, Book 클래스를 새로 만들고 객체 boo 만듬.
	
	Person 클래스에 필드(전역변수) 속성을 확인하는 show() 메소드 생성
	본 main() 클래스에서 해당 메소드 호출 
	
		
4. 클래스의 구성 요소가 어떤 것이 있는지?
A03_Class
5. 프로그램에서 보안이란 어떤 용도로 쓰이는지?

6. 소스의 재활용하는 방법은 어떤 것이 있을까?
7. 객체지향 프로그램에서 상속이란 어떤 의미가 있을까?


저번에 적었던 커리맵을 보면서 한번 후루룩 훑고 설명해주심
A01_java_knowledgeMap 추가됨! 

패키지 아래 하위 패키지를 만들려면 상위패키지.하위패키지명 으로 작성
계층구조로 패키지를 확인하기 위해서는 Project창에서 ;을 눌러서 
package presention > Hierarchical 설정

		  
		 
	*/
		
		
		
	}

}
